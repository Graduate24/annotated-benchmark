package edu.thu.benchmark.annotated.annotation;

/**
 * 漏洞类型枚举
 */
public enum VulnerabilityType {
    /**
     * SQL注入
     */
    SQL_INJECTION("SQL Injection", 89),

    /**
     * 跨站脚本攻击
     */
    XSS("Cross-Site Scripting", 79),

    /**
     * 命令注入
     */
    COMMAND_INJECTION("Command Injection", 78),

    /**
     * 路径遍历
     */
    PATH_TRAVERSAL("Path Traversal", 22),

    /**
     * 不安全的反序列化
     */
    INSECURE_DESERIALIZATION("Insecure Deserialization", 502),

    /**
     * XML外部实体注入
     */
    XXE("XML External Entity Injection", 611),

    /**
     * LDAP注入
     */
    LDAP_INJECTION("LDAP Injection", 90),

    /**
     * 不安全的加密存储
     */
    INSECURE_CRYPTOGRAPHIC_STORAGE("Insecure Cryptographic Storage", 327),

    /**
     * 敏感数据泄露
     */
    SENSITIVE_DATA_EXPOSURE("Sensitive Data Exposure", 200),

    /**
     * 缺少功能级访问控制
     */
    MISSING_FUNCTION_LEVEL_ACCESS_CONTROL("Missing Function Level Access Control", 285),

    /**
     * 跨站请求伪造
     */
    CSRF("Cross-Site Request Forgery", 352),

    /**
     * 未验证的重定向和转发
     */
    UNVALIDATED_REDIRECT("Unvalidated Redirect", 601),

    /**
     * 使用已知有漏洞的组件
     */
    VULNERABLE_COMPONENTS("Using Components with Known Vulnerabilities", 829),

    /**
     * 服务端请求伪造
     */
    SSRF("Server-Side Request Forgery", 918),

    /**
     * 其他类型漏洞
     */
    OTHER("Other", 0),

    /**
     * 操作系统命令注入
     */
    OS_COMMAND_INJECTION("Operating System Command Injection", 0);

    private final String name;
    private final int defaultCwe;

    VulnerabilityType(String name, int defaultCwe) {
        this.name = name;
        this.defaultCwe = defaultCwe;
    }

    public String getName() {
        return name;
    }

    public int getDefaultCwe() {
        return defaultCwe;
    }
}
